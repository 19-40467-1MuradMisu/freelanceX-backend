spring.application.name=PaymentService
server.port=8081
server.servlet.context-path=/api
spring.datasource.url=jdbc:postgresql://localhost:5432/payment_service
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.datasource.hikari.connectionTimeout=20000
spring.datasource.hikari.maximumPoolSize=5
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
logging.level.com=INFO
logging.level.org.apache.kafka=OFF
springdoc.swagger-ui.path=/swagger-ui.html
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.spring.json.type.mapping=payment.completed:com.freelancex.paymentservice.dtos.event.payment.CompletePaymentEvent
spring.kafka.consumer.json.group-id=bidding_event_group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
spring.kafka.consumer.properties.spring.deserializer.value.delegate.class=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=com.freelancex.paymentservice.dtos.event.*
spring.kafka.consumer.properties.spring.json.type.mapping=contract.created:com.freelancex.paymentservice.dtos.event.contract.CreateContractEvent
kafka.topics.contract-created=contract.created
kafka.topics.payment-completed=payment.completed